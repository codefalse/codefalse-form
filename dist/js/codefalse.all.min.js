"use strict";!function(f){function d(e,n,t){if(0<t.length){f("#"+e).find(".codefalse-input-options").show();var i=f("#"+e).find(".codefalse-input-options>ul");for(var a in t){var o=t[a],l=o[n.key],s="";for(var u in n.value){var r=n.value[u];""!=s&&(s+=n.separator),s+=o[r]}i.append('<li value="'+l+'">'+s+"</li>")}}}function p(e){f("#"+e+">.codefalse-input-options").hide().find("ul").empty()}f.fn.codefalseInput=function(e,s){var u=f(this),r={placeholder:"Please search...",key:"id",value:["name"],separator:"-",delay:200,ajax:{type:"GET",url:""}};f.extend(r,e);var c="",o="",n={init:function(){u.attr("type","hidden");var e=parseInt(1e5*Math.random()+"");o="codefalse-search"+e;var n=u.attr("class"),t='<input id="'+o+'" type="text" class="'+n+'" placeholder="'+r.placeholder+'"/>';u.after(t);var i='<div id="'+(c="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';f("#"+o).after(i),f("#"+o).on("input",function(){u.val(""),p(c);var o=f(this),l=o.val();setTimeout(function(){var n,t,e,i,a=o.val();""!=a&&(l==a&&(clearTimeout(),null!=s&&"function"==typeof s&&s(a),null!=r.ajax.url&&""!=r.ajax.url&&(n=c,e=a,i=(t=r).ajax,f.ajax({type:i.type,url:i.url,contentType:"json",data:{codefalse:e},success:function(e){d(n,t,e)}}))))},r.delay)});var a=!0;return f("#"+o).on("blur",function(){a&&(u.val()||f(this).val(""),f("#"+c).find(".codefalse-input-options").hide())}),f("#"+c+">.codefalse-input-options").on("mouseenter",function(){a=!1}),f("#"+c+">.codefalse-input-options").on("mouseleave",function(){a=!0}),f("#"+c+">.codefalse-input-options>ul").on("click","li",function(){var e=f(this).val(),n=f(this).text();u.val(e),f("#"+o).val(n),f("#"+c).find(".codefalse-input-options").hide()}),f("#"+o).on("keypress",function(e){13==e.keyCode&&f("#"+c+">.codefalse-input-options>ul").find("li:first").trigger("click")}),this},adapter:function(e){return d(c,r,e),this},reset:function(e,n){return u.val(e),f("#"+o).val(n),this},show:function(){return f("#"+o).show(),this},hide:function(){return f("#"+o).hide(),f("#"+o).val(""),u.val(""),p(c),this}};return n.init(),n}}(jQuery),jQuery;
//# sourceMappingURL=data:application/json;charset=utf8;base64,
