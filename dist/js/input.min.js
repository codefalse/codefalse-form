"use strict";!function(c){function p(e,n,t){c("#"+e).find(".codefalse-input-options").show();var a=c("#"+e).find(".codefalse-input-options>ul");for(var i in t){var o=t[i],l=o[n.key],s="";for(var u in n.value){var r=n.value[u];""!=s&&(s+=n.separator),s+=o[r]}a.append('<li value="'+l+'">'+s+"</li>")}}c.fn.codefalseInput=function(e,l){var s=c(this),u={placeholder:"Please search...",key:"id",value:["name"],separator:"-",ajax:{type:"GET",url:""}};c.extend(u,e);var r="",n={init:function(){s.attr("type","hidden");var e=parseInt(1e5*Math.random()+""),t="codefalse-search"+e,n=s.attr("class"),a='<input id="'+t+'" type="text" class="'+n+'" placeholder="'+u.placeholder+'"/>';s.after(a);var i='<div id="'+(r="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';c("#"+t).after(i),c("#"+t).on("input",function(){var n,t,e,a;s.val(""),c("#"+r+">.codefalse-input-options>ul").empty(),null!=l&&"function"==typeof l&&l(c(this).val()),null!=u.ajax.url&&""!=u.ajax.url&&(n=r,t=u,e=c(this).val(),a=t.ajax,c.ajax({type:a.type,url:a.url,contentType:"json",data:{codefalse:e},success:function(e){p(n,t,e)}}))});var o=!0;return c("#"+t).on("blur",function(){o&&(s.val()||c(this).val(""),c("#"+r).find(".codefalse-input-options").hide())}),c("#"+r+">.codefalse-input-options").on("mouseenter",function(){o=!1}),c("#"+r+">.codefalse-input-options").on("mouseleave",function(){o=!0}),c("#"+r+">.codefalse-input-options>ul").on("click","li",function(){var e=c(this).val(),n=c(this).text();s.val(e),c("#"+t).val(n),c("#"+r).find(".codefalse-input-options").hide()}),c("#"+t).on("keypress",function(e){13==e.keyCode&&c("#"+r+">.codefalse-input-options>ul").find("li:first").trigger("click")}),this},adapter:function(e){return p(r,u,e),this}};return n.init(),n}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
