"use strict";!function(f){function d(e,t,n){if(0<n.length){f("#"+e).find(".codefalse-input-options").show();var a=f("#"+e).find(".codefalse-input-options>ul");for(var i in n){var o=n[i],l=o[t.key],s="";for(var u in t.value){var r=t.value[u];""!=s&&(s+=t.separator),s+=o[r]}a.append('<li value="'+l+'">'+s+"</li>")}}}function p(e){f("#"+e+">.codefalse-input-options").hide().find("ul").empty()}f.fn.codefalseInput=function(e,s){var u=f(this),r={placeholder:"Please search...",key:"id",value:["name"],separator:"-",delay:200,ajax:{type:"GET",url:""},allowInputText:!1,searchName:""};f.extend(r,e);var c="",o="",t={init:function(){u.attr("type","hidden");var e=parseInt(1e5*Math.random()+"");o="codefalse-search"+e;var t=u.attr("class"),n='<input id="'+o+'" name="'+r.searchName+'" type="text" class="'+t+'" placeholder="'+r.placeholder+'"/>';u.after(n);var a='<div id="'+(c="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';f("#"+o).after(a),f("#"+o).on("input",function(){u.val(""),p(c);var o=f(this),l=o.val();setTimeout(function(){var t,n,e,a,i=o.val();""!=i&&(l==i&&(clearTimeout(),null!=s&&"function"==typeof s&&s(i),null!=r.ajax.url&&""!=r.ajax.url&&(t=c,e=i,a=(n=r).ajax,f.ajax({type:a.type,url:a.url,contentType:"json",data:{codefalse:e},success:function(e){d(t,n,e)}}))))},r.delay)});var i=!0;return f("#"+o).on("blur",function(){i&&(u.val()||r.allowInputText||f(this).val(""),f("#"+c).find(".codefalse-input-options").hide())}),f("#"+c+">.codefalse-input-options").on("mouseenter",function(){i=!1}),f("#"+c+">.codefalse-input-options").on("mouseleave",function(){i=!0}),f("#"+c+">.codefalse-input-options>ul").on("click","li",function(){var e=f(this).val(),t=f(this).text();u.val(e),f("#"+o).val(t),f("#"+c).find(".codefalse-input-options").hide()}),f("#"+o).on("keypress",function(e){13==e.keyCode&&f("#"+c+">.codefalse-input-options>ul").find("li:first").trigger("click")}),this},adapter:function(e){return d(c,r,e),this},reset:function(e,t){return u.val(e),f("#"+o).val(t),this},show:function(){return f("#"+o).show(),this},hide:function(){return f("#"+o).hide(),f("#"+o).val(""),u.val(""),p(c),this}};return t.init(),t}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
