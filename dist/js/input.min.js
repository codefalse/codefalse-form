"use strict";!function(p){function d(e,t,n){p("#"+e).find(".codefalse-input-options").show();var a=p("#"+e).find(".codefalse-input-options>ul");for(var i in n){var o=n[i],l=o[t.key],s="";for(var u in t.value){var r=t.value[u];""!=s&&(s+=t.separator),s+=o[r]}a.append('<li value="'+l+'">'+s+"</li>")}}p.fn.codefalseInput=function(e,s){var u=p(this),r={placeholder:"Please search...",key:"id",value:["name"],separator:"-",delay:200,ajax:{type:"GET",url:""}};p.extend(r,e);var c="",t={init:function(){u.attr("type","hidden");var e=parseInt(1e5*Math.random()+""),n="codefalse-search"+e,t=u.attr("class"),a='<input id="'+n+'" type="text" class="'+t+'" placeholder="'+r.placeholder+'"/>';u.after(a);var i='<div id="'+(c="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';p("#"+n).after(i),p("#"+n).on("input",function(){var o=p(this),l=o.val();setTimeout(function(){var t,n,e,a,i=o.val();l==i&&(clearTimeout(),u.val(""),p("#"+c+">.codefalse-input-options>ul").empty(),null!=s&&"function"==typeof s&&s(i),null!=r.ajax.url&&""!=r.ajax.url&&(t=c,e=i,a=(n=r).ajax,p.ajax({type:a.type,url:a.url,contentType:"json",data:{codefalse:e},success:function(e){d(t,n,e)}})))},r.delay)});var o=!0;return p("#"+n).on("blur",function(){o&&(u.val()||p(this).val(""),p("#"+c).find(".codefalse-input-options").hide())}),p("#"+c+">.codefalse-input-options").on("mouseenter",function(){o=!1}),p("#"+c+">.codefalse-input-options").on("mouseleave",function(){o=!0}),p("#"+c+">.codefalse-input-options>ul").on("click","li",function(){var e=p(this).val(),t=p(this).text();u.val(e),p("#"+n).val(t),p("#"+c).find(".codefalse-input-options").hide()}),p("#"+n).on("keypress",function(e){13==e.keyCode&&p("#"+c+">.codefalse-input-options>ul").find("li:first").trigger("click")}),this},adapter:function(e){return d(c,r,e),this}};return t.init(),t}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
