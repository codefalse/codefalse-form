"use strict";!function(c){function p(e,a,t){c("#"+e).find(".codefalse-input-options").show();var n=c("#"+e).find(".codefalse-input-options>ul");for(var i in n.empty(),t){var o=t[i],l=o[a.key],s="";for(var u in a.value){var r=a.value[u];""!=s&&(s+=a.separator),s+=o[r]}n.append('<li value="'+l+'">'+s+"</li>")}}c.fn.codefalseInput=function(e,l){var s=c(this),u={placeholder:"Please search...",key:"id",value:["name"],separator:"-",ajax:{type:"GET",url:""}};c.extend(u,e);var r="",a={init:function(){s.attr("type","hidden");var e=parseInt(1e5*Math.random()+""),t="codefalse-search"+e,a=s.attr("class"),n='<input id="'+t+'" type="text" class="'+a+'" placeholder="'+u.placeholder+'"/>';s.after(n);var i='<div id="'+(r="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';c("#"+t).after(i),c("#"+t).on("input",function(){var a,t,e,n;s.val(""),null!=l&&"function"==typeof l&&l(c(this).val()),null!=u.ajax.url&&""!=u.ajax.url&&(a=r,t=u,e=c(this).val(),n=t.ajax,c.ajax({type:n.type,url:n.url,contentType:"json",data:{codefalse:e},success:function(e){p(a,t,e)}}))});var o=!0;return c("#"+t).on("blur",function(){o&&(s.val()||c(this).val(""),c("#"+r).find(".codefalse-input-options").hide())}),c("#"+r+">.codefalse-input-options").on("mouseenter",function(){o=!1}),c("#"+r+">.codefalse-input-options").on("mouseleave",function(){o=!0}),c("#"+r+">.codefalse-input-options>ul").on("click","li",function(){var e=c(this).val(),a=c(this).text();s.val(e),c("#"+t).val(a),c("#"+r).find(".codefalse-input-options").hide()}),this},adapter:function(e){return p(r,u,e),this}};return a.init(),a}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
