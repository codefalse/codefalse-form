"use strict";!function(d){function f(e,n,t){if(0<t.length){d("#"+e).find(".codefalse-input-options").show();var a=d("#"+e).find(".codefalse-input-options>ul");for(var i in t){var o=t[i],l=o[n.key],s="";for(var u in n.value){var r=n.value[u];""!=s&&(s+=n.separator),s+=o[r]}a.append('<li value="'+l+'">'+s+"</li>")}}}d.fn.codefalseInput=function(e,s){var u=d(this),r={placeholder:"Please search...",key:"id",value:["name"],separator:"-",delay:200,ajax:{type:"GET",url:""}};d.extend(r,e);var c="",n={init:function(){u.attr("type","hidden");var e=parseInt(1e5*Math.random()+""),t="codefalse-search"+e,n=u.attr("class"),a='<input id="'+t+'" type="text" class="'+n+'" placeholder="'+r.placeholder+'"/>';u.after(a);var i='<div id="'+(c="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';d("#"+t).after(i),d("#"+t).on("input",function(){u.val(""),d("#"+c+">.codefalse-input-options").hide().find("ul").empty();var o=d(this),l=o.val();setTimeout(function(){var n,t,e,a,i=o.val();""!=i&&(l==i&&(clearTimeout(),null!=s&&"function"==typeof s&&s(i),null!=r.ajax.url&&""!=r.ajax.url&&(n=c,e=i,a=(t=r).ajax,d.ajax({type:a.type,url:a.url,contentType:"json",data:{codefalse:e},success:function(e){f(n,t,e)}}))))},r.delay)});var o=!0;return d("#"+t).on("blur",function(){o&&(u.val()||d(this).val(""),d("#"+c).find(".codefalse-input-options").hide())}),d("#"+c+">.codefalse-input-options").on("mouseenter",function(){o=!1}),d("#"+c+">.codefalse-input-options").on("mouseleave",function(){o=!0}),d("#"+c+">.codefalse-input-options>ul").on("click","li",function(){var e=d(this).val(),n=d(this).text();u.val(e),d("#"+t).val(n),d("#"+c).find(".codefalse-input-options").hide()}),d("#"+t).on("keypress",function(e){13==e.keyCode&&d("#"+c+">.codefalse-input-options>ul").find("li:first").trigger("click")}),this},adapter:function(e){return f(c,r,e),this}};return n.init(),n}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
