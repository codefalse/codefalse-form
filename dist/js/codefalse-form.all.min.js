"use strict";!function(r){r.fn.codefalseFile=function(e){var t=this,i=r(this),d="codefalse-file-"+parseInt(1e5*Math.random()+""),f=r.extend({},{width:"200px",height:"200px",uploadType:"normal"},e);i.on("change",function(){for(var c=r(t)[0].files,e=function(e){var i,t=c[e],a='<div class="codefalse-file-item" style="height: '+(i=f).height+";width: "+i.width+';">   <div class="codefalse-file-operation" style="width: '+i.width+';">      <i class="codefalse-file-del codefalse-font icon-delete"></i>      <i data-modaal-content-source="" class="codefalse-file-yulan codefalse-font icon-yulan"></i>   </div>   <img src="" /></div>',n=r("#"+d).find(".codefalse-file-add");n.before(a),r(".codefalse-file-yulan").modaal({type:"image",before_open:function(e){var i=window.URL.createObjectURL(t);e.target.setAttribute("href",i)},before_close:function(e){var i=e.find("img").attr("src");window.URL.revokeObjectURL(i)}});var o=n.prev(),l=o.find("img");if("normal"===f.uploadType){var s=window.URL.createObjectURL(t);l.attr("src",s),l.on("load",function(){window.URL.revokeObjectURL(l.attr("src"))})}o.find(".codefalse-file-del").on("click",function(){o.remove()})},i=0;i<c.length;i++)e(i)}),i.attr("style","display:none"),i.after('<div id="'+d+'" class="codefalse-file">    <div class="codefalse-file-item codefalse-file-add" style="height: '+(a=f).height+";width: "+a.width+';">        <i class="codefalse-font icon-add" style="line-height: '+a.height+';"></i>    </div></div>'),r(".codefalse-file-add>i").on("click",function(){i.trigger("click")});var a}}(jQuery),function(r){function u(e,i,t){if(0<t.length){r("#"+e).find(".codefalse-input-options").show();var a=r("#"+e).find(".codefalse-input-options>ul");for(var n in t){var o=t[n],l=o[i.key],s="";for(var c in i.value){var d=i.value[c];""!=s&&(s+=i.separator),s+=o[d]}a.append('<li value="'+l+'">'+s+"</li>")}}}function p(e){r("#"+e+">.codefalse-input-options").hide().find("ul").empty()}r.fn.codefalseInput=function(e,s){var c=r(this),d={placeholder:"Please search...",key:"id",value:["name"],separator:"-",delay:200,ajax:{type:"GET",url:""},allowInputText:!1,searchName:""};r.extend(d,e);var f="",o="",i={init:function(){c.attr("type","hidden");var e=parseInt(1e5*Math.random()+"");o="codefalse-search"+e;var i=c.attr("class"),t='<input id="'+o+'" name="'+d.searchName+'" type="text" class="'+i+'" placeholder="'+d.placeholder+'" autocomplete="off"/>';c.after(t);var a='<div id="'+(f="codefalse-input"+e)+'" class="codefalse-input">        <div class="codefalse-input-options">            <ul></ul>        </div>    </div>';r("#"+o).after(a),r("#"+o).on("input",function(){c.val(""),p(f);var o=r(this),l=o.val();setTimeout(function(){var i,t,e,a,n=o.val();""!=n&&(l==n&&(clearTimeout(),null!=s&&"function"==typeof s&&s(n),null!=d.ajax.url&&""!=d.ajax.url&&(i=f,e=n,a=(t=d).ajax,r.ajax({type:a.type,url:a.url,contentType:"json",data:{codefalse:e},success:function(e){u(i,t,e)}}))))},d.delay)});var n=!0;return r("#"+o).on("blur",function(){n&&(c.val()||d.allowInputText||r(this).val(""),r("#"+f).find(".codefalse-input-options").hide())}),r("#"+f+">.codefalse-input-options").on("mouseenter",function(){n=!1}),r("#"+f+">.codefalse-input-options").on("mouseleave",function(){n=!0}),r("#"+f+">.codefalse-input-options>ul").on("click","li",function(){var e=r(this).val(),i=r(this).text();c.val(e),r("#"+o).val(i),r("#"+f).find(".codefalse-input-options").hide()}),r("#"+o).on("keypress",function(e){13==e.keyCode&&r("#"+f+">.codefalse-input-options>ul").find("li:first").trigger("click")}),this},adapter:function(e){return u(f,d,e),this},reset:function(e,i){return c.val(e),r("#"+o).val(i),this},show:function(){return r("#"+o).show(),this},hide:function(){return r("#"+o).hide(),r("#"+o).val(""),c.val(""),p(f),this}};return i.init(),i}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
