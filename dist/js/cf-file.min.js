"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};!function(a){function d(e,i,t){var n='<div class="codefalse-file-item file-item" style="height: '+e.height+";width: "+e.width+';">   <div class="codefalse-file-operation" style="width: '+e.width+';">      <i class="codefalse-file-del codefalse-font icon-delete"></i>      <i class="codefalse-file-yulan codefalse-font icon-yulan"></i>   </div>   <img src="'+t+'" />   <input type="hidden" name="'+e.name+'" value="'+t+'"/></div>',o=a("#"+i).find(".file-add");o.before(n),o.prev().find(".codefalse-file-yulan").modaal({type:"image",content_source:t})}a.fn.codefalseFile=function(e,t){var o=this,i=a(this),l=a.extend({},{width:"200px",height:"200px",name:"codefalseFile"},e),f="codefalse-file-"+parseInt(1e5*Math.random()+"");i.on("change",function(){for(var e=a(o)[0].files,i=0;i<e.length;i++){var t=e[i],n=new FileReader;n.readAsDataURL(t),n.onload=function(e){d(l,f,e.target.result)}}});var n={_init:function(){var e;i.attr("style","display:none"),i.after('<div id="'+f+'" class="codefalse-file">    <div class="codefalse-file-item file-add" style="height: '+(e=l).height+";width: "+e.width+';">        <i class="codefalse-font icon-add" style="line-height: '+e.height+';"></i>    </div></div>'),a(".file-add>i").on("click",function(){i.trigger("click")}),a("#"+f).on("mouseenter",".file-item",function(){a(this).find(".codefalse-file-operation").show()}),a("#"+f).on("mouseleave",".file-item",function(){a(this).find(".codefalse-file-operation").hide()}),a("#"+f).on("click",".codefalse-file-del",function(){var e=a(this).parent().parent(),i=e.find("img").attr("src");"function"==typeof t&&t(i),e.remove()})},adapter:function(e){if("object"===(void 0===e?"undefined":_typeof(e))){if(void 0===e.length)return;for(var i=0;i<e.length;i++)d(l,f,e[i])}}};return n._init(),n}}(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
